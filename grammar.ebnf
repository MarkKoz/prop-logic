variable = "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" ;

(* The starting rule doesn't need the group as an alternative *)
(* This is cause it already encapsulates term indirectly, and term produces a group *)
expression = implies_expression;
group = "(", expression, ")";

(* Binary *)
implies_expression = or_expression ("→", or_expression)*;
or_expression = and_expression ("∨", and_expression)*;
and_expression = term ("∧", term)*;

(* Unary *)
not_expression = "¬", term;

term = variable | group | not_expression;
